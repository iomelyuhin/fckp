"use strict";document.addEventListener("DOMContentLoaded",(function(){function e(e,t,s,n,r){var i=document.querySelector(e),a=i.querySelector(t),o=i.querySelector(s),c=i.querySelectorAll(n),d=i.querySelector(r),l=d.children[0],u=d.children[1],v=d.children[2],m=c[0].offsetWidth,_=0,f=0,L=0,p=0,g=0,h=0,y=0,j=!1,x=!1,E=!0,b=!0,q=0,S=0,A=(c.length-1)*m,k=.35*c[0].offsetWidth,M=/([-0-9.]+(?=px))/,w=function(){return-1!==event.type.search("touch")?event.touches[0]:event},X=function(){var e;b&&(o.style.transition="transform .5s"),o.style.transform="translate3d(-".concat(_*m,"px, 0px, 0px)"),l.classList.toggle("disabled",0===_),v.classList.toggle("disabled",_===c.length-1),e=_,i.querySelectorAll(".js_dot").forEach((function(t){t.classList.remove("active"),t.dataset.slideIndex===e&&t.classList.add("active")}))},Y=function(){var e=w();E&&(b=!0,q=(_+1)*-m,S=(_-1)*-m,f=L=e.clientX,g=e.clientY,o.style.transition="",document.addEventListener("touchmove",W),document.addEventListener("mousemove",W),document.addEventListener("touchend",C),document.addEventListener("mouseup",C),a.classList.remove("grab"),a.classList.add("grabbing"))},W=function(){var e=w(),t=+o.style.transform.match(M)[0];if(p=L-e.clientX,L=e.clientX,h=g-e.clientY,g=e.clientY,!j&&!x){var s=Math.abs(h);s>7||0===p?(x=!0,E=!1):s<7&&(j=!0)}if(j){if(0===_){if(f<L)return void D(t,0);E=!0}if(_===c.length-1){if(f>L)return void D(t,A);E=!0}if(f>L&&t<q||f<L&&t>S)return void H();o.style.transform="translate3d(".concat(t-p,"px, 0px, 0px)")}},C=function e(){y=f-L,x=!1,j=!1,document.removeEventListener("touchmove",W),document.removeEventListener("mousemove",W),document.removeEventListener("touchend",e),document.removeEventListener("mouseup",e),a.classList.add("grab"),a.classList.remove("grabbing"),E?(Math.abs(y)>k&&(f<L?_--:f>L&&_++),f!==L?(E=!1,X()):E=!0):E=!0},D=function(e,t){e>=t&&e>t&&(o.style.transform="translate3d(".concat(t,"px, 0px, 0px)")),E=!1},H=function(){b=!1,C(),E=!0};o.style.transform="translate3d(0px, 0px, 0px)",a.classList.add("grab"),o.addEventListener("transitionend",(function(){E=!0,u.innerHTML="".concat(_+1,"/").concat(c.length)})),i.addEventListener("touchstart",Y),i.addEventListener("mousedown",Y),d.addEventListener("click",(function(){var e=event.target;if(console.log(event.target.classList),e.classList.contains("next"))_++;else{if(!e.classList.contains("prev"))return;_--}X()})),i.querySelector(".js__slider-pagination")&&i.querySelector(".js__slider-pagination").addEventListener("click",(function(e){i.querySelectorAll(".js_dot").forEach((function(e){e.classList.remove("active")})),_=e.target.getAttribute("data-slide-index"),e.target.classList.add("active"),X()}))}if(document.querySelector(".js__slider")){e(".js__slider",".js__slider-list",".js__slider-track",".js__slide",".js__slider-arrows");for(var t=document.querySelectorAll(".js__slide"),s=document.querySelector(".js__slider-pagination"),n=0;n<t.length;n++){var r=document.createElement("button");r.classList.add("hero__slider-pagination-item"),r.classList.add("js_dot"),r.setAttribute("data-slide-index",n),s.append(r)}document.querySelectorAll(".js_dot")[0].classList.add("active")}document.querySelector(".js__partners-slider")&&e(".js__partners-slider",".js__partners-slider-list",".js__partners-slider-track",".js__partners-slide",".js__partners-slider-arrows")}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
